module Main

import "std/io"

fn main() {

    // Immutable assignment
    list := LinkedList.new().push(0)

    // ERROR: list = list.push(1)
    // ERROR: list.push_mut(1)

    // Prints: "[0]"
    io.printf("%A\n", list)

    // New scope
    {
        // This is doing an alias and the aliased version is mutable
        list :mut = list
            .push(1)
            .push(2)
            .push(3)

        // This mutates the list in-place
        list.push_mut(4)

        // Prints: "[1, 2, 3, 4]"
        io.printf("%A\n", list)
    }

    // Prints: "[0]"
    io.printf("%A\n", list)
}


module LinkedList {

    // Maybe for data only modules, we support a `datamodule Node` construct.
    module Node {
        struct {
            data: i32
            next: ?*Node
        }
    }

    struct {
        root: ?*Node
    }


    fn new() Self {
        return LinkedList {
            root: null
        }
    }

    fn push(self, item: i32) Self {
        return Self {
            root: &Node {
                data: item
                next: self.root
            }
        }
    }

    // functions which mutate the "self" input *must* end
    // with the suffix _mut. This tells the compiler to
    // pass self as a *mut Self rather than the default
    // *const Self
    fn push_mut(self, item: i32) {
        new_node = &Node {
            data: item
            next: self.root
        }

        self.root = new_node
    }

}
